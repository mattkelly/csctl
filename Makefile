SHELL=/bin/bash
PROJECT_NAME ?= csctl
BINARY_NAME ?= ${PROJECT_NAME}
PKG ?= github.com/containership/${PROJECT_NAME}
IMAGE_NAME ?= containership/${PROJECT_NAME}
IMAGE_TAG ?= latest
PKG_LIST := $(shell go list ./...)
GO_FILES := $(shell find . -type f -not -path './vendor/*' -name '*.go')

GIT_DESCRIBE=$(shell git describe --dirty 2>/dev/null)
GIT_COMMIT=$(shell git rev-parse --short HEAD)
DATESTAMP=$(shell date '+%s')

LDFLAGS := "-X ${PKG}/pkg/buildinfo.gitDescribe=${GIT_DESCRIBE} \
	-X ${PKG}/pkg/buildinfo.gitCommit=${GIT_COMMIT} \
	-X ${PKG}/pkg/buildinfo.unixTime=${DATESTAMP}"

# Ensure go module support is enabled, i.e.
# This is required in case this repo lives in the $GOPATH/src tree.
export GO111MODULE=on

.PHONY: all
all: ## (default) Build the binary
	@go build -ldflags ${LDFLAGS}

.PHONY: install
install: ## Install the binary
	@go install -ldflags ${LDFLAGS}

.PHONY: docker
docker: ## Build the Docker image
	@docker image build -t ${IMAGE_NAME}:${IMAGE_TAG} . \
		--build-arg GIT_DESCRIBE=${GIT_DESCRIBE} \
		--build-arg GIT_COMMIT=${GIT_COMMIT} \

.PHONY: check
check: fmt-check golangci test ## Run all checkers and tests

.PHONY: golangci
golangci: ## Run GolangCI checks
	@golangci-lint run

.PHONY: fmt-check
fmt-check: ## Check the file format
	@gofmt -s -e -d $(GO_FILES) | read; \
		if [ $$? == 0 ]; then \
			echo "gofmt check failed:"; \
			gofmt -s -e -d $(GO_FILES); \
			exit 1; \
		fi

.PHONY: test
test: ## Run unit tests
	@go test -short ${PKG_LIST}

.PHONY: coverage
coverage: ## Run unit tests with coverage checking / codecov integration
	@go test -short -coverprofile=coverage.txt -covermode=count ${PKG_LIST}

## Read about data race https://golang.org/doc/articles/race_detector.html
## to not test file for race use `// +build !race` at top
.PHONY: race
race: ## Run data race detector
	@go test -race -short ${PKG_LIST}

.PHONY: msan
msan: ## Run memory sanitizer (only works on linux/amd64)
	@go test -msan -short ${PKG_LIST}

.PHONY: help
help: ## Display this help screen
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.PHONY: gen
gen: ## Generate autogenerated files
	@./hack/generate-swagger.sh
