// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureRMVirtualMachineStorageDataDisk azure r m virtual machine storage data disk
// swagger:model AzureRMVirtualMachineStorageDataDisk
type AzureRMVirtualMachineStorageDataDisk struct {

	// caching
	Caching string `json:"caching,omitempty"`

	// create option
	CreateOption string `json:"create_option,omitempty"`

	// disk size gb
	// Required: true
	DiskSizeGb *int64 `json:"disk_size_gb"`

	// lun
	// Required: true
	Lun *int64 `json:"lun"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this azure r m virtual machine storage data disk
func (m *AzureRMVirtualMachineStorageDataDisk) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskSizeGb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRMVirtualMachineStorageDataDisk) validateDiskSizeGb(formats strfmt.Registry) error {

	if err := validate.Required("disk_size_gb", "body", m.DiskSizeGb); err != nil {
		return err
	}

	return nil
}

func (m *AzureRMVirtualMachineStorageDataDisk) validateLun(formats strfmt.Registry) error {

	if err := validate.Required("lun", "body", m.Lun); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureRMVirtualMachineStorageDataDisk) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureRMVirtualMachineStorageDataDisk) UnmarshalBinary(b []byte) error {
	var res AzureRMVirtualMachineStorageDataDisk
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
