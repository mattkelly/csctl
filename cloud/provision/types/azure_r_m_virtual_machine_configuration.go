// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AzureRMVirtualMachineConfiguration azure r m virtual machine configuration
// swagger:model AzureRMVirtualMachineConfiguration
type AzureRMVirtualMachineConfiguration struct {

	// availability set id
	AvailabilitySetID string `json:"availability_set_id,omitempty"`

	// location
	Location string `json:"location,omitempty"`

	// os profile
	OsProfile *AzureRMVirtualMachineOSProfile `json:"os_profile,omitempty"`

	// os profile linux config
	OsProfileLinuxConfig *AzureRMVirtualMachineOSProfileLinuxConfig `json:"os_profile_linux_config,omitempty"`

	// resource group name
	ResourceGroupName string `json:"resource_group_name,omitempty"`

	// storage data disk
	StorageDataDisk []*AzureRMVirtualMachineStorageDataDisk `json:"storage_data_disk"`

	// storage image reference
	StorageImageReference *AzureRMVirtualMachineStorageImageReference `json:"storage_image_reference,omitempty"`

	// storage os disk
	StorageOsDisk *AzureRMVirtualMachineStorageOSDisk `json:"storage_os_disk,omitempty"`

	// vm size
	VMSize string `json:"vm_size,omitempty"`
}

// Validate validates this azure r m virtual machine configuration
func (m *AzureRMVirtualMachineConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOsProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsProfileLinuxConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageDataDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageImageReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageOsDisk(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureRMVirtualMachineConfiguration) validateOsProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.OsProfile) { // not required
		return nil
	}

	if m.OsProfile != nil {
		if err := m.OsProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_profile")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRMVirtualMachineConfiguration) validateOsProfileLinuxConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.OsProfileLinuxConfig) { // not required
		return nil
	}

	if m.OsProfileLinuxConfig != nil {
		if err := m.OsProfileLinuxConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("os_profile_linux_config")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRMVirtualMachineConfiguration) validateStorageDataDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageDataDisk) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageDataDisk); i++ {
		if swag.IsZero(m.StorageDataDisk[i]) { // not required
			continue
		}

		if m.StorageDataDisk[i] != nil {
			if err := m.StorageDataDisk[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storage_data_disk" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AzureRMVirtualMachineConfiguration) validateStorageImageReference(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageImageReference) { // not required
		return nil
	}

	if m.StorageImageReference != nil {
		if err := m.StorageImageReference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_image_reference")
			}
			return err
		}
	}

	return nil
}

func (m *AzureRMVirtualMachineConfiguration) validateStorageOsDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.StorageOsDisk) { // not required
		return nil
	}

	if m.StorageOsDisk != nil {
		if err := m.StorageOsDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("storage_os_disk")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureRMVirtualMachineConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureRMVirtualMachineConfiguration) UnmarshalBinary(b []byte) error {
	var res AzureRMVirtualMachineConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
