// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PacketDeviceConfiguration Configuration for a Packet device
// swagger:model PacketDeviceConfiguration
type PacketDeviceConfiguration struct {

	// Facility for this packet device
	// Required: true
	Facility *string `json:"facility"`

	// OS for this packet device
	// Enum: [centos_7 rhel_7 ubuntu_16_04]
	OperatingSystem string `json:"operating_system,omitempty"`

	// Plan for this packet device
	// Required: true
	Plan *string `json:"plan"`

	// Packet project ID
	// Required: true
	ProjectID UUID `json:"project_id"`
}

// Validate validates this packet device configuration
func (m *PacketDeviceConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFacility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PacketDeviceConfiguration) validateFacility(formats strfmt.Registry) error {

	if err := validate.Required("facility", "body", m.Facility); err != nil {
		return err
	}

	return nil
}

var packetDeviceConfigurationTypeOperatingSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["centos_7","rhel_7","ubuntu_16_04"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packetDeviceConfigurationTypeOperatingSystemPropEnum = append(packetDeviceConfigurationTypeOperatingSystemPropEnum, v)
	}
}

const (

	// PacketDeviceConfigurationOperatingSystemCentos7 captures enum value "centos_7"
	PacketDeviceConfigurationOperatingSystemCentos7 string = "centos_7"

	// PacketDeviceConfigurationOperatingSystemRhel7 captures enum value "rhel_7"
	PacketDeviceConfigurationOperatingSystemRhel7 string = "rhel_7"

	// PacketDeviceConfigurationOperatingSystemUbuntu1604 captures enum value "ubuntu_16_04"
	PacketDeviceConfigurationOperatingSystemUbuntu1604 string = "ubuntu_16_04"
)

// prop value enum
func (m *PacketDeviceConfiguration) validateOperatingSystemEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, packetDeviceConfigurationTypeOperatingSystemPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PacketDeviceConfiguration) validateOperatingSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatingSystemEnum("operating_system", "body", m.OperatingSystem); err != nil {
		return err
	}

	return nil
}

func (m *PacketDeviceConfiguration) validatePlan(formats strfmt.Registry) error {

	if err := validate.Required("plan", "body", m.Plan); err != nil {
		return err
	}

	return nil
}

func (m *PacketDeviceConfiguration) validateProjectID(formats strfmt.Registry) error {

	if err := m.ProjectID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("project_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PacketDeviceConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PacketDeviceConfiguration) UnmarshalBinary(b []byte) error {
	var res PacketDeviceConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
