// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationRule authorization rule
// swagger:model AuthorizationRule
type AuthorizationRule struct {

	// API groups this rule applies to
	APIGroups []string `json:"api_groups"`

	// Timestamp at which the rule was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Description of the rule
	Description string `json:"description,omitempty"`

	// Role ID
	// Required: true
	ID UUID `json:"id"`

	// Name of the rule
	// Required: true
	Name *string `json:"name"`

	// Set of partial URLs a user should have access to
	NonResourceUrls []string `json:"non_resource_urls"`

	// Organization ID of the organization the rule belongs to
	// Required: true
	OrganizationID UUID `json:"organization_id"`

	// Account ID of the rule owner
	// Required: true
	OwnerID UUID `json:"owner_id"`

	// Resource names this rule applies to
	// Required: true
	ResourceNames []string `json:"resource_names"`

	// Resources this rule applies to
	// Required: true
	Resources []string `json:"resources"`

	// Type of this rule
	// Required: true
	// Enum: [containership kubernetes]
	Type *string `json:"type"`

	// Timestamp at which the rule was updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// Verbs this rule applies to
	// Required: true
	Verbs []string `json:"verbs"`
}

// Validate validates this authorization rule
func (m *AuthorizationRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceNames(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerbs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationRule) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateOrganizationID(formats strfmt.Registry) error {

	if err := m.OrganizationID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("organization_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateOwnerID(formats strfmt.Registry) error {

	if err := m.OwnerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("owner_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateResourceNames(formats strfmt.Registry) error {

	if err := validate.Required("resource_names", "body", m.ResourceNames); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateResources(formats strfmt.Registry) error {

	if err := validate.Required("resources", "body", m.Resources); err != nil {
		return err
	}

	return nil
}

var authorizationRuleTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["containership","kubernetes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authorizationRuleTypeTypePropEnum = append(authorizationRuleTypeTypePropEnum, v)
	}
}

const (

	// AuthorizationRuleTypeContainership captures enum value "containership"
	AuthorizationRuleTypeContainership string = "containership"

	// AuthorizationRuleTypeKubernetes captures enum value "kubernetes"
	AuthorizationRuleTypeKubernetes string = "kubernetes"
)

// prop value enum
func (m *AuthorizationRule) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, authorizationRuleTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AuthorizationRule) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRule) validateVerbs(formats strfmt.Registry) error {

	if err := validate.Required("verbs", "body", m.Verbs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationRule) UnmarshalBinary(b []byte) error {
	var res AuthorizationRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
