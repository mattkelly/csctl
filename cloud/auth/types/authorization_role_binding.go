// Code generated by go-swagger; DO NOT EDIT.

package types

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthorizationRoleBinding authorization role binding
// swagger:model AuthorizationRoleBinding
type AuthorizationRoleBinding struct {

	// Authorization role ID this role binding applies to
	// Required: true
	AuthorizationRoleID UUID `json:"authorization_role_id"`

	// Cluster ID this role binding applies to
	ClusterID UUID `json:"cluster_id,omitempty"`

	// Timestamp at which the role was created
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Role ID
	// Required: true
	ID UUID `json:"id"`

	// Namespace this role binding applies to
	Namespace string `json:"namespace,omitempty"`

	// Organization ID of the organization the role belongs to
	// Required: true
	OrganizationID UUID `json:"organization_id"`

	// Account ID of the role binding owner
	// Required: true
	OwnerID UUID `json:"owner_id"`

	// Team ID this role binding applies to (required when kind is TeamBinding, else forbidden)
	TeamID UUID `json:"team_id,omitempty"`

	// Type of role binding
	// Required: true
	// Enum: [UserBinding TeamBinding]
	Type *string `json:"type"`

	// Timestamp at which the role was updated
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// User ID this role binding applies to (required when kind is UserBinding, else forbidden)
	UserID UUID `json:"user_id,omitempty"`
}

// Validate validates this authorization role binding
func (m *AuthorizationRoleBinding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthorizationRoleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthorizationRoleBinding) validateAuthorizationRoleID(formats strfmt.Registry) error {

	if err := m.AuthorizationRoleID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("authorization_role_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateClusterID(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterID) { // not required
		return nil
	}

	if err := m.ClusterID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cluster_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateOrganizationID(formats strfmt.Registry) error {

	if err := m.OrganizationID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("organization_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateOwnerID(formats strfmt.Registry) error {

	if err := m.OwnerID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("owner_id")
		}
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateTeamID(formats strfmt.Registry) error {

	if swag.IsZero(m.TeamID) { // not required
		return nil
	}

	if err := m.TeamID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("team_id")
		}
		return err
	}

	return nil
}

var authorizationRoleBindingTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UserBinding","TeamBinding"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authorizationRoleBindingTypeTypePropEnum = append(authorizationRoleBindingTypeTypePropEnum, v)
	}
}

const (

	// AuthorizationRoleBindingTypeUserBinding captures enum value "UserBinding"
	AuthorizationRoleBindingTypeUserBinding string = "UserBinding"

	// AuthorizationRoleBindingTypeTeamBinding captures enum value "TeamBinding"
	AuthorizationRoleBindingTypeTeamBinding string = "TeamBinding"
)

// prop value enum
func (m *AuthorizationRoleBinding) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, authorizationRoleBindingTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AuthorizationRoleBinding) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *AuthorizationRoleBinding) validateUserID(formats strfmt.Registry) error {

	if swag.IsZero(m.UserID) { // not required
		return nil
	}

	if err := m.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("user_id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthorizationRoleBinding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthorizationRoleBinding) UnmarshalBinary(b []byte) error {
	var res AuthorizationRoleBinding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
